<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_CsvPersistentEventStorage" Id="{0ab77ab6-e9c9-486b-9f88-3419b9f172e3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CsvPersistentEventStorage IMPLEMENTS I_PersistentEventStorage
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR

VAR
	// Instantiate FB to create/open file for editing
	fbFileOpen : FB_FileOpen := (sPathName := 'C:\Events.log' , nMode := FOPEN_MODEAPPEND OR FOPEN_MODETEXT);
	
	// Instantiate FB to write into a file
	fbFilePuts : FB_FilePuts;
	
	
	// Instantiate FB to close the file
	fbFileClose : FB_FileClose;
	
	
	// create local ENUM for our State Machine
	eWriteState : (FILE_OPEN_TRIGGER, FILE_OPEN,
				                 WAIT_FOR_EVENT, 
			   WRITE_EVENT_TRIGGER, WRITE_EVENT, 
				 FILE_CLOSE_TRIGGER, FILE_CLOSE,
										 ERROR); 
	// Event to Write
	stEventWrittenToFile : ST_Event;
	
	// Variable to store the STRING to write into the file
	CsvString : T_MaxString; 	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE eWriteState OF
	
(***********************    WAIT   ********************************)
	WAIT_FOR_EVENT :
		// Do nothing, we are waiting for the user to call us
		

(***********************    OPEN   ********************************)
	FILE_OPEN_TRIGGER : 
		fbFileOpen(bExecute := TRUE); // send rising edge to request Windows to Open the File
		eWriteState := FILE_OPEN; // go next step
		
		
	FILE_OPEN : 
		IF fbFileOpen.bError THEN // Error Detection from FB OUTPUT
			eWriteState := ERROR; // go to Error step
			
		ELSIF NOT fbFileOpen.bBusy AND fbFileOpen.hFile <> 0 THEN // Check if we are ready to Open (using Busy Flag and File Handle)
			eWriteState := WRITE_EVENT_TRIGGER; // go to next step
			
		END_IF
		
		fbFileOpen(bExecute := FALSE);
		


(**********************    WRITE   ********************************)
	WRITE_EVENT_TRIGGER : 
		//eWriteState := FILE_OPEN_TRIGGER; // go to next step?? I think this is just a typo... ignore it for now?
		
		CsvString := CreateCsvString(stEvent := stEventWrittenToFile); // Convert ST_Event into a CSV String (use method)
		
		
		
		fbFilePuts(bExecute := TRUE,            // send rising edge to request Windows to Write into the File
					sLine := CsvString,         // then send CSV String
					hFile := fbFileOpen.hFile);	// and pass the File Handle
		
		eWriteState := WRITE_EVENT; // go to next step

		
	WRITE_EVENT : 
		IF fbFilePuts.bError THEN // Error Detection from FB OUTPUT
			eWriteState := ERROR; // go to Error step
		
		
		ELSIF NOT fbFilePuts.bBusy THEN // Check if we are ready to write (check with Busy Flag) 
			eWriteState := FILE_CLOSE_TRIGGER; // go to next step
		END_IF
		fbFilePuts(bExecute := FALSE);
		
(***********************    CLOSE   ********************************)	
	FILE_CLOSE_TRIGGER : 
		fbFileClose(bExecute := TRUE,           // send rising edge to request Windows to Close the File
					hFile := fbFileOpen.hFile);	// then pass the File Handle
		
		eWriteState := FILE_CLOSE; // go to next step
	
		
	FILE_CLOSE : 
		IF fbFileClose.bError THEN // Error Detection from FB OUTPUT
			eWriteState := ERROR; // go to Error step
		
		
		ELSIF NOT fbFileClose.bBusy THEN // Check if we are ready to close (check with Busy Flag) 
			eWriteState := WAIT_FOR_EVENT; // restart state machine and wait
			
		END_IF
		fbFileClose(bExecute := FALSE);
		
(***********************    ERROR   ********************************)
	ERROR :
		// Do nothing (for now)
		
END_CASE]]></ST>
    </Implementation>
    <Method Name="CreateCsvString" Id="{3fd66c46-3774-4c4f-acce-5f91f66546ea}">
      <Declaration><![CDATA[METHOD PRIVATE CreateCsvString : T_MaxString
VAR_INPUT
	stEvent : REFERENCE TO ST_Event;	
END_VAR

VAR
	TempString : T_MaxString; 
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TempString := TO_STRING(stEvent.eEventType);
TempString := CONCAT(STR1 := TempString, STR2 := ',');
TempString := CONCAT(STR1 := TempString, STR2 := TO_STRING(stEvent.eEventSeverity));
TempString := CONCAT(STR1 := TempString, STR2 := ',');
TempString := CONCAT(STR1 := TempString, STR2 := TO_STRING(stEvent.nEventIdentity));
TempString := CONCAT(STR1 := TempString, STR2 := ',');
TempString := CONCAT(STR1 := TempString, STR2 := stEvent.sEvenText);
TempString := CONCAT(STR1 := TempString, STR2 := ',');
TempString := CONCAT(STR1 := TempString, STR2 := TO_STRING(stEvent.dtTimestamp));
TempString := CONCAT(STR1 := TempString, STR2 := '$n');

CreateCsvString := TempString; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="StoreEvent" Id="{5bf84965-704a-47ab-bd0a-573443519796}">
      <Declaration><![CDATA[METHOD StoreEvent
VAR_INPUT
	stEvent	: ST_Event;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Here is where the CSV-writing will be done

// Are we ready to Write? 
IF eWriteState = WAIT_FOR_EVENT THEN
	// Go to next step
	eWriteState := WRITE_EVENT_TRIGGER;
	// Take Event to Write from Input
	stEventWrittenToFile := stEvent;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CsvPersistentEventStorage">
      <LineId Id="103" Count="0" />
      <LineId Id="324" Count="0" />
      <LineId Id="315" Count="1" />
      <LineId Id="297" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="198" Count="1" />
      <LineId Id="307" Count="1" />
      <LineId Id="201" Count="0" />
      <LineId Id="205" Count="2" />
      <LineId Id="209" Count="3" />
      <LineId Id="314" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="298" Count="1" />
      <LineId Id="306" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="217" Count="1" />
      <LineId Id="318" Count="0" />
      <LineId Id="219" Count="8" />
      <LineId Id="309" Count="0" />
      <LineId Id="228" Count="1" />
      <LineId Id="233" Count="5" />
      <LineId Id="260" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="239" Count="1" />
      <LineId Id="319" Count="0" />
      <LineId Id="244" Count="3" />
      <LineId Id="323" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="252" Count="5" />
      <LineId Id="261" Count="1" />
      <LineId Id="313" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="258" Count="1" />
      <LineId Id="168" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="FB_CsvPersistentEventStorage.CreateCsvString">
      <LineId Id="17" Count="10" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CsvPersistentEventStorage.StoreEvent">
      <LineId Id="7" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="14" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>